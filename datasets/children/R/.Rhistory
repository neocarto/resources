min(dots$children, na.rm=T)
max(dots$children, na.rm=T)
dots$id <- c(1:nrow(dots))
smoothLayer(x = dots,
var = 'children',
span = 500000, beta = 2,resolution = 200000,
legend.title.txt = "Peolple < 15 ans",
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
col = carto.pal(pal1 = 'red.pal', n1 = 13),
legend.pos = "bottomleft", legend.values.rnd = -2, border = "white", lwd=0.5)
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
beta = 2,
returnclass = "sf")
plot(st_geometry(pot))
plot(st_geometry(dots))
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
resolution = 200000,
beta = 2,
returnclass = "sf")
plot(st_geometry(pot))
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
beta = 2,
returnclass = "sf")
plot(st_geometry(pot))
# r <- raster("../data/gpw_v4_population_density_adjusted_to_2015_unwpp_country_totals_rev10_2015_1_deg.asc")
# fact <- 2
r <- raster("../data/gpw_v4_population_count_adjusted_to_2015_unwpp_country_totals_rev11_2020_30_min.tif")
st_crs(r)
fact <- 5
dots <- aggregate(r, fact=fact, fun=sum)
dots <- as(dots, 'SpatialPointsDataFrame')
dots <- st_as_sf(dots)
dots <- st_transform(dots, crs(world))
colnames(dots) <- c("pop","geometry")
# Nearest country -> id codes
for (i in 1:dim(dots)[1]){
countries <- world
dot <- dots[i,]
d <- st_distance(countries, dot, by_element = TRUE,  which = "distance")
countries$dist <- as.numeric(d)
min <- min(countries$dist)
myid <- countries$ISONUM[countries$dist == min][1]
dots[i,"id"] <- myid
}
dots <- merge(x = dots, y = pop, by = "id", all.x=T)
dots$children <- dots$pop * dots$share
colnames(dots)
dots <- dots[,c("id","name","children","geometry")]
plot(st_geometry(dots))
dots$children <- round(dots$children,0)
dots$children[is.na(dots$children)] <- 0
dots <- dots[dots$children > 0,]
dots$children <- dots$children / 1000
st_write(dots, "../output/dots.shp", append = FALSE)
dots <- read_sf("../output/dots.shp")
min(dots$children, na.rm=T)
max(dots$children, na.rm=T)
dots$id <- c(1:nrow(dots))
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
beta = 2,
returnclass = "sf")
plot(st_geometry(pot))
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 1,
beta = 2,
returnclass = "sf")
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 1,
beta = 2,
returnclass = "sf")
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 1,
beta = 10,
returnclass = "sf")
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 2,
beta = 2,
returnclass = "sf")
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 0.5,
beta = 2,
returnclass = "sf")
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 5,
beta = 2,
returnclass = "sf")
plot(st_geometry(pot))
pot <- quickStewart(x = dots,
var = "children",
span = 300000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 5,
beta = 2,
returnclass = "sf")
plot(st_geometry(pot))
pot <- quickStewart(x = dots,
var = "children",
span = 100000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 5,
beta = 2,
returnclass = "sf")
plot(st_geometry(pot))
pot <- quickStewart(x = dots,
var = "children",
span = 100000,
#breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 5,
beta = 2,
returnclass = "sf")
plot(st_geometry(pot))
pot <- quickStewart(x = dots,
var = "children",
span = 100000,
breaks = c(0, 25, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 5,
beta = 2,
returnclass = "sf")
plot(st_geometry(pot))
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 5,
beta = 1,
returnclass = "sf")
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 1,
beta = 2,
returnclass = "sf")
plot(st_geometry(pot))
library(rmapshaper)
st_write(smooth,"../output/smooth_big.shp")
smooth <- smoothLayer(x = dots,
var = 'children',
span = 500000, beta = 2,resolution = 200000,
legend.title.txt = "Peolple < 15 ans",
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
col = carto.pal(pal1 = 'red.pal', n1 = 13),
legend.pos = "bottomleft", legend.values.rnd = -2, border = "white", lwd=0.5)
# Packages
library(raster)
library(sf)
library(cartography)
library(SpatialPosition)
library(sp)
library(readxl)
library(rgdal)
library(rmapshaper)
# ----------------------
# Data import & handling
# ----------------------
# Total population by age group (Souce : United Nations, Department of Economic and Social Affairs, Population Division (2017). World Population Prospects: The 2017 Revision, DVD Edition.)
pop <- read_excel("../data/WPP2017_POP_F07_1_POPULATION_BY_AGE_BOTH_SEXES.xlsx", sheet = "MEDIUM VARIANT", skip = 16)
pop <- as.data.frame(pop)
pop <- pop[pop[6] == 2015,]
pop$total <- rowSums(pop[,7:27] )
pop$children <- rowSums(pop[,7:9])
pop <-  pop[,c("Country code", "Region, subregion, country or area *","children","total")]
pop$share <- pop$children/pop$total
pop <- pop[,c("Country code","Region, subregion, country or area *","share")]
colnames(pop) <- c("id","name","share")
# Countries
world <- st_read(dsn = "../data/world_countries_data.shp", stringsAsFactors = F)
fields <- c("ISONUM", "NAMEfr")
world <- world[,fields]
world <- st_transform(world,"+proj=longlat +datum=WGS84 +no_defs ")
# population grid
# r <- raster("../data/gpw_v4_population_density_adjusted_to_2015_unwpp_country_totals_rev10_2015_1_deg.asc")
# fact <- 2
r <- raster("../data/gpw_v4_population_count_adjusted_to_2015_unwpp_country_totals_rev11_2020_30_min.tif")
st_crs(r)
fact <- 5
dots <- aggregate(r, fact=fact, fun=sum)
dots <- as(dots, 'SpatialPointsDataFrame')
dots <- st_as_sf(dots)
dots <- st_transform(dots, crs(world))
colnames(dots) <- c("pop","geometry")
# Nearest country -> id codes
for (i in 1:dim(dots)[1]){
countries <- world
dot <- dots[i,]
d <- st_distance(countries, dot, by_element = TRUE,  which = "distance")
countries$dist <- as.numeric(d)
min <- min(countries$dist)
myid <- countries$ISONUM[countries$dist == min][1]
dots[i,"id"] <- myid
}
# get nb of children by dots
dots <- merge(x = dots, y = pop, by = "id", all.x=T)
dots$children <- dots$pop * dots$share
colnames(dots)
dots <- dots[,c("id","name","children","geometry")]
# plot(st_geometry(countries), col="#CCCCCC", border="white")
# plot(st_geometry(dots), col="black", pch=20,add=T)
# plot(st_geometry(dots[is.na(dots$share),]), col="red", pch=20, add=T)
dots$children <- round(dots$children,0)
dots$children[is.na(dots$children)] <- 0
dots <- dots[dots$children > 0,]
dots$children <- dots$children / 1000
st_write(dots, "../output/dots.shp", append = FALSE)
# -----------
# Cartography
# -----------
dots <- read_sf("../output/dots.shp")
min(dots$children, na.rm=T)
max(dots$children, na.rm=T)
dots$id <- c(1:nrow(dots))
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 1,
beta = 2,
returnclass = "sf")
st_write(pot,"../output/smooth_big.shp")
plot(st_geometry(pot))
x <- st_read("../output/smooth_big.shp")
smooth <- ms_simplify(x, keep = 0.5)
plot(st_geometry(smooth))
smooth <- ms_simplify(x, keep = 0.1)
plot(st_geometry(smooth))
smooth <- ms_simplify(x, keep = 0.2)
plot(st_geometry(smooth))
smooth <- ms_simplify(x, keep = 0.25)
plot(st_geometry(smooth))
smooth2 <- st_crop(smooth, land)
# Clip
world <- st_read(dsn = "../data/land.shp", stringsAsFactors = F)
smooth2 <- st_crop(smooth, land)
# Clip
land <- st_read(dsn = "../data/land.shp", stringsAsFactors = F)
smooth2 <- st_crop(smooth, land)
plot(st_geometry(smooth2))
plot(st_geometry(smooth2), col = "red")
# Clip
land <- st_read(dsn = "../data/land.shp", stringsAsFactors = F)
smooth2 <- st_crop(smooth, land)
plot(st_geometry(smooth2), col = "red")
# Clip
land <- st_read(dsn = "../data/land.shp", stringsAsFactors = F)
plot(st_geometry(smooth))
plot(st_geometry(land), add=T)
smooth2 <- st_intersection(smooth,land)
plot(st_geometry(smooth2), col = "red")
View(smooth2)
View(smooth2)
smooth3 = smooth2 %>%
st_set_precision(10000) %>%
group_by(id) %>%
plot(world_continents2[1])
smooth3 = smooth2 %>%
st_set_precision(10000) %>%
group_by("id") %>%
plot(world_continents2[1])
smooth3 = smooth2 %>%
st_set_precision(10000) %>%
group_by("id")
library(spData)
library(sf)
library(tidyverse)
smooth3 = smooth2 %>%
st_set_precision(10000) %>%
group_by("id")
plot(st_geometry(smooth3))
plot(st_geometry(smooth3), col = "red")
View(smooth3)
smooth3 = smooth2 %>%
st_set_precision(10000) %>%
group_by(id)
plot(st_geometry(smooth3), col = "red")
View(smooth3)
smooth3 = smooth2 %>% group_by(id)
plot(st_geometry(smooth3), col = "red")
View(smooth3)
plot(st_union(smooth2))
plot(st_union(smooth2), by_feature = TRUE)
plot(st_union(smooth2, by_feature = TRUE))
x <- st_union(smooth2, by_feature = TRUE)
x <- st_union(smooth2, by_feature = TRUE)
View(x)
install.packages("MTA")
library(mta
)
library(MTA)
tdev
View(x)
smooth3 <- smooth2 %>%
group_by(id) %>%
st_union()
View(smooth3)
plot(smooth3)
smooth3 <- smooth2 %>%
group_by("id") %>%
st_union()
plot(smooth3)
View(smooth2)
smooth3 <- smooth2 %>%
group_by(min) %>%
st_union()
View(smooth2)
plot(smooth3)
smooth2 %>%
split(.$id) %>%
lapply(st_union) %>%
do.call(c, .) %>% # bind the list element to a single sfc
st_cast() %>% # mapview doesn't like GEOMETRY -> cast to MULTIPOLYGON
mapview()
smooth2 %>%
split(.$id) %>%
lapply(st_union) %>%
do.call(c, .) %>% # bind the list element to a single sfc
st_cast() %>% # mapview doesn't like GEOMETRY -> cast to MULTIPOLYGON
plot(smooth3)
smooth3 <- smooth2 %>%
split(.$id) %>%
lapply(st_union) %>%
do.call(c, .) %>% # bind the list element to a single sfc
st_cast()
plot(smooth3)
View(smooth3)
class(smooth2)
class(smooth3)
dim(smooth3)
length(smooth3)
View(smooth2)
df <- smooth3[c(1:13)]
View(df)
df <- smooth2[c(1:13)]
View(df)
df <- smooth2[c(1:13)]
df <- smooth2[c(1:13),]
View(df)
output <- smooth2[c(1:13),]
output$geometry <- smooth3
output$col <- c("#5A9974","#8FC7A8","#D2E2CA","#F9F7D3","#FFEDA0","#FFD977","#F9B14E","#F28B41","#E95032","#E31C1E","#BD1829","#7F152A","#520D22")
View(output)
tmp <- smooth2 %>%
split(.$id) %>%
lapply(st_union) %>%
do.call(c, .) %>% # bind the list element to a single sfc
st_cast()
output <- smooth2[c(1:13),]
output$geometry <- tmp
plot(st_geometry(output))
View(output)
colnames(output)
output <- output[,c("id","min","max","center","geometry")]
x <- st_read("../output/smooth_big.shp")
smooth <- ms_simplify(x, keep = 0.25)
plot(st_geometry(smooth))
# Clip
land <- st_read(dsn = "../data/land.shp", stringsAsFactors = F)
plot(st_geometry(land), add=T)
smooth2 <- st_intersection(smooth,land)
plot(st_geometry(smooth2), col = "red")
# Group
tmp <- smooth2 %>%
split(.$id) %>%
lapply(st_union) %>%
do.call(c, .) %>% # bind the list element to a single sfc
st_cast()
output <- smooth2[c(1:13),]
output$geometry <- tmp
# Colors
output$col <- c("#5A9974","#8FC7A8","#D2E2CA","#F9F7D3","#FFEDA0","#FFD977","#F9B14E","#F28B41","#E95032","#E31C1E","#BD1829","#7F152A","#520D22")
output <- output[,c("id","min","max","center","col","geometry")]
View(output)
writeOGR(output, "smooth", layer="smooth", driver="GeoJSON")
# Export
st_write(output, smooth.shp)
# Export
st_write(output, "../output/smooth.shp")
# Packages
library(raster)
library(sf)
library(cartography)
library(SpatialPosition)
library(sp)
library(readxl)
library(rgdal)
library(rmapshaper)
# ----------------------
dots <- read_sf("../output/dots.shp")
min(dots$children, na.rm=T)
max(dots$children, na.rm=T)
dots$id <- c(1:nrow(dots))
pot <- quickStewart(x = dots,
var = "children",
span = 500000,
breaks = c(0, 100, 200, 500, 1000, 2000, 5000, 10000, 20000 ,50000, 70000, 100000, 130000  ),
resolution = 1,
beta = 2,
returnclass = "sf")
x <- st_read("../output/smooth.shp")
View(x)
x2 <- x
st_geometry(x2) <- st_geometry(x2) + c(0.2,0.2)
plot(st_geometry(x))
plot(st_geometry(x2), add=T)
st_geometry(x2) <- st_geometry(x2) + c(1,1)
plot(st_geometry(x))
plot(st_geometry(x2), add=T)
st_geometry(x2) <- st_geometry(x2) + c(1,-1)
plot(st_geometry(x))
plot(st_geometry(x2), add=T)
plot(st_geometry(x), col = "blue")
plot(st_geometry(x2), add=T, col = "red")
plot(st_geometry(x2),  col = "red")
plot(st_geometry(x), col = "blue", add=T)
st_geometry(x2) <- st_geometry(x2) + c(0.3,-0.3)
plot(st_geometry(x2),  col = "red")
plot(st_geometry(x), col = "blue", add=T)
st_geometry(x2) <- st_geometry(x2) + c(0.1,-0.1)
plot(st_geometry(x2),  col = "red")
plot(st_geometry(x), col = "blue", add=T)
st_geometry(x2) <- st_geometry(x) + c(0.1,-0.1)
plot(st_geometry(x2),  col = "red")
plot(st_geometry(x), col = "blue", add=T)
st_geometry(x2) <- st_geometry(x) + c(0.5,-0.5)
plot(st_geometry(x2),  col = "red")
plot(st_geometry(x), col = "blue", add=T)
st_geometry(x2) <- st_geometry(x) + c(0.4,-0.4)
st_geometry(x3) <- st_geometry(x) + c(-0.4,0.4)
x3 <- x
st_geometry(x2) <- st_geometry(x) + c(0.4,-0.4)
st_geometry(x3) <- st_geometry(x) + c(-0.4,0.4)
nb <- nrow(x)
nb
smmoth_tanaka <- x[,]
smooth_tanaka <- x[,]
View(smooth_tanaka)
smooth_tanaka <- x[0,]
View(smooth_tanaka)
for (i in 1:nb){
smooth_tanaka <- rbind(smooth_tanaka, x[,i])
smooth_tanaka <- rbind(smooth_tanaka, x2[,i])
smooth_tanaka <- rbind(smooth_tanaka, x3[,i])
}
st_crs(smooth_tanaka)
st_crs(x)
st_crs(x2)
x <- st_read("../output/smooth.shp")
x2 <- x
x3 <- x
st_geometry(x2) <- st_geometry(x) + c(0.4,-0.4)
st_crs(x2) <- st_crs(x)
x2$col <- "#ffffff"
st_geometry(x3) <- st_geometry(x) + c(-0.4,0.4)
st_crs(x3) <- st_crs(x)
x3$col <- "#545252"
smooth_tanaka <- x[0,]
nb <- nrow(x)
for (i in 1:nb){
smooth_tanaka <- rbind(smooth_tanaka, x[,i])
smooth_tanaka <- rbind(smooth_tanaka, x2[,i])
smooth_tanaka <- rbind(smooth_tanaka, x3[,i])
}
x1
x2
x3
x
x[,1]
x[1,]
x <- st_read("../output/smooth.shp")
x2 <- x
x3 <- x
st_geometry(x2) <- st_geometry(x) + c(0.4,-0.4)
st_crs(x2) <- st_crs(x)
x2$col <- "#ffffff"
st_geometry(x3) <- st_geometry(x) + c(-0.4,0.4)
st_crs(x3) <- st_crs(x)
x3$col <- "#545252"
smooth_tanaka <- x[0,]
nb <- nrow(x)
for (i in 1:nb){
smooth_tanaka <- rbind(smooth_tanaka, x[i,])
smooth_tanaka <- rbind(smooth_tanaka, x2[i,])
smooth_tanaka <- rbind(smooth_tanaka, x3[i,])
}
st_write(smooth_tanaka, "../output/smooth_tanaka.shp")
